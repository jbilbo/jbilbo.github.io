<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Jonathan Hernandez]]></title>
  <link href="http://jbilbo.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://jbilbo.com/"/>
  <updated>2015-05-24T21:22:57+01:00</updated>
  <id>http://jbilbo.com/</id>
  <author>
    <name><![CDATA[Jonathan Hernandez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing CORS Headers With RSpec and Rack in Rails]]></title>
    <link href="http://jbilbo.com/blog/2015/05/19/testing-cors-with-rspec/"/>
    <updated>2015-05-19T01:16:17+01:00</updated>
    <id>http://jbilbo.com/blog/2015/05/19/testing-cors-with-rspec</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve not found any blog post or article about how to easily test CORS support implemented in a <a href="http://rack.github.io/">Rack</a> middleware (e.g. using the <a href="https://github.com/cyu/rack-cors">rack-cors</a> gem) with RSpec in Rails. So, after figured out I decided to write some small tips I learned from it.</p>

<p>I assume you have a fairly updated Rails app, I tested it with Rails 4.2.x, with <code>RSpec</code> tests support, and you want to add support for <code>CORS</code> headers.</p>

<h2>Install rack-cors gem</h2>

<p>it&rsquo;s better to follow the gem instructions (you&rsquo;ll find the most updated instructions there) than a blog post, but anyway here&rsquo;s how I did it:</p>

<p>Add this to your <code>Gemfile</code>:
<code>sh
gem 'rack-cors', :require =&gt; 'rack/cors'
</code></p>

<p>Add this to your <code>config/application.rb</code>:
<code>ruby
config.middleware.insert_before(0, "Rack::Cors", logger: (-&gt; { Rails.logger })) do
  allow do
    origins '*'
    resource '*', headers: :any, methods: [:get, :post, :patch, :options]
  end
end
</code>
These are the common options, tune it to your needs. Here we&rsquo;re allowing requests from any domain for the <code>get</code>, <code>post</code>, <code>patch</code> and <code>options</code> methods. <code>options</code> is a special method used for <a href="http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/">preflight</a> requests.</p>

<p>That&rsquo;s it. <code>CORS</code> is now active in this Rails app. Every time we send a request with the <code>CORS</code> headers, we&rsquo;ll receive the <code>CORS</code> response headers.</p>

<h2>How to test it with cURL</h2>

<p>With <a href="http://curl.haxx.se/">cURL</a>, it&rsquo;s easy to test <code>CORS</code>. Let&rsquo;s see the most common scenarios:</p>

<h4>Sending the <code>Origin</code> header:</h4>

<ul>
<li><code>-H</code>: Header to include in the request.</li>
<li><code>-I</code>: Fetch the <code>HTTP</code> header only.</li>
</ul>


<pre><code class="sh">curl -H "Origin:*" -I http://localhost:3000/people/1234
</code></pre>

<p>We should receive: <code>Access-Control-Allow-Origin: *</code>.</p>

<h4>Sending the preflight options method:</h4>

<p>Send a options request with <code>Origin: *</code>, <code>Access-Control-Request-Method: get</code> and <code>Access-Control-Request-Headers: test</code>.
* <code>-X</code>: Specifies a custom request method
<code>sh
curl -X OPTIONS -I http://localhost:3000 -H 'Origin: *' -H 'Access-Control-Request-Method: GET' -H 'Access-Control-Request-Headers: test'
</code>
We should receive <code>Access-Control-Allow-Origin: *</code>, <code>Access-Control-Allow-Methods: get, post, patch, options</code>, and <code>Access-Control-Allow-Headers: test</code>.</p>

<h2>How to test it with <code>RSpec</code></h2>

<p>It&rsquo;s a little tricky to test it with <code>RSpec</code>, because we don&rsquo;t have a real server (like <a href="https://github.com/nahi/webrick">Webrick</a>, <a href="http://unicorn.bogomips.org/">Unicorn</a> or <a href="https://github.com/puma/puma">Puma</a>) between the code and the client. This is usually not a problem but it does affect in this particular case, and this <a href="https://tools.ietf.org/html/rfc3875#section-4.1.18">rfc3875</a> explains why. The server translate the custom <code>HTTP</code> request headers in this way:</p>

<ul>
<li>Convert to upper case.</li>
<li>Replace <code>-</code> with <code>_</code></li>
<li>Prepend <code>HTTP_</code>.</li>
</ul>


<p>Because we don&rsquo;t have the server to do it for us, we must do it manually. For example, the <code>Origin</code> becomes <code>HTTP_ORIGIN</code> and <code>Http-Access-Control-Request-Method</code> becomes <code>HTTP_ACCESS_CONTROL_REQUEST_METHOD</code>.
Let&rsquo;s see some example tests:</p>

<h4>Sending the Origin header:</h4>

<pre><code class="ruby">scenario 'Returns the response CORS headers' do
  get '/people/1234', nil, 'HTTP_ORIGIN' =&gt; '*'

  expect(last_response.headers['Access-Control-Allow-Origin']).to eq('*')
end
</code></pre>

<h4>Sending the preflight options method:</h4>

<pre><code class="ruby">scenario 'Send the CORS preflight OPTIONS request' do
  options '/', nil, 'HTTP_ORIGIN' =&gt; '*', 'HTTP_ACCESS_CONTROL_REQUEST_METHOD' =&gt; 'GET', 'HTTP_ACCESS_CONTROL_REQUEST_HEADERS' =&gt; 'test'

  expect(last_response.headers['Access-Control-Allow-Origin']).to eq('*')
  expect(last_response.headers['Access-Control-Allow-Methods']).to eq('GET, POST, PATCH, OPTIONS')
  expect(last_response.headers['Access-Control-Allow-Headers']).to eq('test')
  expect(last_response.headers).to have_key('Access-Control-Max-Age')
end
</code></pre>

<p>Don&rsquo;t forget to uppercase, replace <code>-</code> and prepend <code>HTTP_</code> to all your custom HTTP headers when testing.</p>
]]></content>
  </entry>
  
</feed>
